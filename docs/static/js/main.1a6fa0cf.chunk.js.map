{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","valueLabelFormat","value","Math","round","spareRandom","App","props","add2signals","signal","state","signal_filtered","push","shift","noise_symbol","noise_std","val","u","v","s","mul","random","sqrt","log","normalRandom","sum","slice","filter","length","map","ii","setState","add2bits","bits","true_bits","decoded_bits","buffered_bits","count","handicap","update","array","pulse","handle_SNR","event","pow","snr","log10","handle_SXB","Array","fill","this","interval","setInterval","clearInterval","bits2show","bit","className","Row","Col","lg","Card","CardHeader","CardTitle","CardBody","data","datasets","label","showLine","lineTension","backgroundColor","borderColor","borderWidth","borderDash","borderDashOffset","pointRadius","reverse","simbol","x","y","options","animation","duration","legend","display","tooltips","enabled","responsive","scales","yAxes","barPercentage","gridLines","drawBorder","color","zeroLineColor","ticks","min","max","padding","fontColor","stepSize","xAxes","md","FormLabel","component","Slider","onChange","aria-labelledby","valueLabelDisplay","getAriaValueText","step","Table","align","math","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","onUpdate","onSuccess","catch","error","document","body","classList","add","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1a6fa0cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Scatter } from 'react-chartjs-2';\nimport { sum, log10, pow } from 'mathjs'\nimport slice from 'slice.js';\nimport logo from './logo.svg';\nimport './App.css';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Slider from '@material-ui/core/Slider';\nimport 'katex/dist/katex.min.css';\nimport { InlineMath, BlockMath } from 'react-katex';\n\nimport {\n  Button,\n  ButtonGroup,\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  CardText,\n  CardTitle,\n  Label,\n  FormGroup,\n  Input,\n  Table,\n  Row,\n  Col\n} from \"reactstrap\";\n\nfunction valueLabelFormat(value){\n  return(''+Math.round(10*value)/10)\n}\n\nfunction last(array){\n  return(array[array.length-1])\n}\n\nvar spareRandom = null;\nfunction normalRandom()\n{\n\tvar val, u, v, s, mul;\n\n\tif(spareRandom !== null)\n\t{\n\t\tval = spareRandom;\n\t\tspareRandom = null;\n\t}\n\telse\n\t{\n\t\tdo\n\t\t{\n\t\t\tu = Math.random()*2-1;\n\t\t\tv = Math.random()*2-1;\n\n\t\t\ts = u*u+v*v;\n\t\t} while(s === 0 || s >= 1);\n\n\t\tmul = Math.sqrt(-2 * Math.log(s) / s);\n\n\t\tval = u * mul;\n\t\tspareRandom = v * mul;\n\t}\n\n\treturn val;\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      bits: new Array(18).fill(false),\n      signal: new Array(180).fill(0.0),\n      signal_filtered: new Array(60).fill(0.0),\n      pulse: new Array(10).fill(1),\n      filter: new Array(10).fill(0.1),\n      count: 0,\n      true_bits: new Array(20).fill(false),\n      decoded_bits: new Array(20).fill(false),\n    }\n    this.buffered_bits = 19;\n    this.noise_symbol = 90;\n    this.noise_std = 0.5;\n    this.snr = 20*log10(1/this.noise_std)\n    this.handicap = 0\n  }\n  add2signals = (value) => {\n    var signal = this.state.signal\n    var signal_filtered = this.state.signal_filtered\n    signal.push(value ? 1 : -1)\n    signal.shift()\n    signal[this.noise_symbol] += this.noise_std*normalRandom()\n    signal_filtered.push(\n      sum(signal.slice(0, this.state.filter.length).map((value, ii) => value*this.state.filter[ii]))\n    )\n    signal_filtered.shift()\n    this.setState({signal: signal, signal_filtered: signal_filtered})\n  }\n  add2bits = (value) => {\n    var bits = this.state.bits\n    var true_bits = this.state.true_bits\n    var decoded_bits = this.state.decoded_bits\n    bits.push(value)\n    true_bits.push(bits[0])\n    while (bits.length > this.buffered_bits) {\n      bits.shift()\n    }\n    true_bits.shift()\n    decoded_bits.push(this.state.signal_filtered[this.state.signal_filtered.length-(this.state.count+2+this.handicap)] > 0)\n    decoded_bits.shift()\n    this.setState({bits: bits, true_bits: true_bits, decoded_bits: decoded_bits})\n  }\n  update = () => {\n    this.add2signals(last(this.state.bits)*this.state.pulse[this.state.count])\n    if (this.state.count >= this.state.pulse.length-1) {\n      this.add2bits(Math.random() >= 0.5)\n      this.setState({count: 0})\n    } else {\n      this.setState({count: this.state.count+1})\n    }\n  }\n  handle_SNR = (event, value) => {\n    this.noise_std = pow(10, -value/20)\n    this.snr = 20*log10(1/this.noise_std)\n  }\n  handle_SXB = (event, value) => {\n    this.setState({pulse: new Array(value).fill(1), filter: new Array(value).fill(1/value)})\n    this.handicap = (value-(180%value))%value\n    this.buffered_bits = 1+(180+this.handicap)/value\n  }\n  componentDidMount() {\n    this.interval = setInterval(() => this.update(), 50);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  render() {\n    var bits2show = []\n    if(this.buffered_bits < 18){\n      bits2show = this.state.true_bits.map(bit => (bit ? '1' : '0'))\n    } else {\n      bits2show = [...this.state.true_bits.slice(0, 4).map(bit => (bit ? '1' : '0')), '...', ...this.state.true_bits.slice(-4).map(bit => (bit ? '1' : '0'))]\n    }\n    return (\n      <div className=\"App\">\n        <Row>\n          <Col lg=\"1\">\n          </Col>\n          <Col lg=\"7\">\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  <h3>\n                    Communication\n                  </h3>\n                </CardTitle>\n              </CardHeader>\n              <CardBody>\n                <Scatter\n                  data={{\n                    datasets: [\n                      {\n                        label: \"signal\",\n                        fill: true,\n                        showLine: true,\n                        lineTension: 0.1,\n                        backgroundColor: \"rgba(50, 50, 255, 0.1)\",\n                        borderColor: \"rgba(50, 50, 255, 1)\",\n                        borderWidth: 2,\n                        borderDash: [],\n                        borderDashOffset: 0.0,\n                        pointRadius: 3,//4,\n                        data: this.state.signal.slice(-this.noise_symbol+1).reverse().map((simbol, ii) => {return({x: ii, y: simbol})}),\n                      },\n                      {\n                        label: \"signal_w_noise\",\n                        fill: true,\n                        showLine: true,\n                        lineTension: 0.1,\n                        backgroundColor: \"rgba(255, 0, 0, 0.1)\",\n                        borderColor: \"rgba(255, 0, 0, 1)\",\n                        borderWidth: 2,\n                        borderDash: [],\n                        borderDashOffset: 0.0,\n                        pointRadius: 3,//4,\n                        data: this.state.signal.slice(this.state.filter.length, -this.noise_symbol+1).reverse().map((simbol, ii) => {return({x: this.noise_symbol+ii-1, y: simbol})}),\n                      },\n                      {\n                        label: \"signal_for filter\",\n                        fill: true,\n                        showLine: true,\n                        lineTension: 0.1,\n                        backgroundColor: \"rgba(255, 150, 0, 0.1)\",\n                        borderColor: \"rgba(255, 150, 0, 1)\",\n                        borderWidth: 2,\n                        borderDash: [],\n                        borderDashOffset: 0.0,\n                        pointRadius: 3,//4,\n                        data: this.state.signal.slice(0, this.state.filter.length).reverse().map((simbol, ii) => {return({x: this.state.signal.length+ii-this.state.filter.length, y: simbol})}),\n                      }\n                    ]\n                  }}\n                  options={{\n                    animation: {\n                        duration: 0.05\n                    },\n                    legend: {\n                      display: false\n                    },\n                    tooltips: {\n                      enabled: false,\n                    },\n                    responsive: true,\n                    scales: {\n                      yAxes: [\n                        {\n                          barPercentage: 1.6,\n                          gridLines: {\n                            drawBorder: false,\n                            color: \"rgba(29,140,248,0.0)\",\n                            zeroLineColor: \"transparent\"\n                          },\n                          ticks: {\n                            min: -2,\n                            max: 2,\n                            padding: 20,\n                            fontColor: \"#9e9e9e\",\n                            stepSize: 1\n                          }\n                        }\n                      ],\n\n                      xAxes: [\n                        {\n                          barPercentage: 1.6,\n                          gridLines: {\n                            drawBorder: false,\n                            color: \"rgba(0,242,195,0.1)\",\n                            zeroLineColor: \"transparent\"\n                          },\n                          ticks: {\n                            padding: 20,\n                            min: 0,\n                            max: 180,\n                            fontColor: \"#9e9e9e\"\n                          }\n                        }\n                      ]\n                    }\n                  }}\n                />\n              </CardBody>\n            </Card>\n          </Col>\n          <Col lg=\"3\">\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  <h3>\n                    Filter\n                  </h3>\n                </CardTitle>\n              </CardHeader>\n              <CardBody>\n                <Scatter\n                  data={{\n                    datasets: [\n                      {\n                        label: \"signal_sub\",\n                        fill: true,\n                        showLine: false,\n                        lineTension: 0.1,\n                        backgroundColor: \"rgba(255, 0, 0, 0.1)\",\n                        borderColor: \"rgba(255, 0, 0, 1)\",\n                        borderWidth: 2,\n                        borderDash: [],\n                        borderDashOffset: 0.0,\n                        pointRadius: 5,//4,\n                        data: slice(this.state.signal_filtered)['-'+(this.state.count+1+this.handicap)+':0:-'+this.state.filter.length].map((simbol, ii) => {return({x: ii*this.state.filter.length+this.state.count+this.handicap, y: simbol})}),\n                      },\n                      {\n                        label: \"signal\",\n                        fill: true,\n                        showLine: true,\n                        lineTension: 0.1,\n                        backgroundColor: \"rgba(0, 255, 0, 0.1)\",\n                        borderColor: \"rgba(0, 200, 0, 1)\",\n                        borderWidth: 2,\n                        borderDash: [],\n                        borderDashOffset: 0.0,\n                        pointRadius: 3,//4,\n                        data: this.state.signal_filtered.slice().reverse().map((simbol, ii) => {return({x: ii, y: simbol})}),\n                      }\n                    ]\n                  }}\n                  options={{\n                    animation: {\n                        duration: 0.05\n                    },\n                    legend: {\n                      display: false\n                    },\n                    tooltips: {\n                      enabled: false,\n                    },\n                    responsive: true,\n                    scales: {\n                      yAxes: [\n                        {\n                          barPercentage: 1.6,\n                          gridLines: {\n                            drawBorder: false,\n                            color: \"rgba(29,140,248,0.0)\",\n                            zeroLineColor: \"transparent\"\n                          },\n                          ticks: {\n                            min: -2,\n                            max: 2,\n                            padding: 20,\n                            fontColor: \"#9e9e9e\",\n                            stepSize: 1\n                          }\n                        }\n                      ],\n\n                      xAxes: [\n                        {\n                          barPercentage: 1.6,\n                          gridLines: {\n                            drawBorder: false,\n                            color: \"rgba(0,242,195,0.1)\",\n                            zeroLineColor: \"transparent\"\n                          },\n                          ticks: {\n                            padding: 20,\n                            min: 0,\n                            max: 60,\n                            fontColor: \"#9e9e9e\"\n                          }\n                        }\n                      ]\n                    }\n                  }}\n                />\n              </CardBody>\n            </Card>\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  <h4>\n                    Controls\n                  </h4>\n                </CardTitle>\n              </CardHeader>\n              <CardBody>\n                <Row>\n                  <Col md=\"6\">\n                    <FormLabel component=\"legend\">\n                      SNR (dB)\n                    </FormLabel>\n                    <Slider\n                      value={this.snr}\n                      onChange={this.handle_SNR}\n                      aria-labelledby=\"continuous-slider\"\n                      valueLabelDisplay=\"auto\"\n                      getAriaValueText={valueLabelFormat}\n                      valueLabelFormat={valueLabelFormat}\n                      min={-10}\n                      max={20}\n                      step={0.01}\n                    />\n                  </Col>\n                  <Col md=\"6\">\n                    <FormLabel component=\"legend\">\n                      Samples per bit\n                    </FormLabel>\n                    <Slider\n                      value={this.state.pulse.length}\n                      onChange={this.handle_SXB}\n                      aria-labelledby=\"discrete-slider\"\n                      valueLabelDisplay=\"auto\"\n                      getAriaValueText={valueLabelFormat}\n                      valueLabelFormat={valueLabelFormat}\n                      min={1}\n                      max={30}\n                      step={1}\n                    />\n                  </Col>\n                </Row>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg=\"1\">\n          </Col>\n          <Col lg=\"10\">\n            <Card>\n              <CardBody>\n                <Table>\n                  <tbody>\n                    <tr>\n                      {bits2show.slice().reverse().map(bit => {return(\n                        <td>\n                          {bit}\n                        </td>\n                      )})}\n                      {this.state.true_bits.slice().reverse().map(bit => {return(\n                        <td>\n                          {bit ? '1' : '0'}\n                        </td>\n                      )})}\n                      <td>\n                        True bits\n                      </td>\n                    </tr>\n                    <tr>\n                      {bits2show.slice().reverse().map(bit => {return(\n                        <td>\n                        </td>\n                      )})}\n                      {this.state.decoded_bits.slice().reverse().map(bit => {return(\n                        <td>\n                          {bit ? '1' : '0'}\n                        </td>\n                      )})}\n                      <td>\n                        Decoded bits\n                      </td>\n                    </tr>\n                    <tr>\n                      {bits2show.slice().reverse().map(bit => {return(\n                        <td>\n                        </td>\n                      )})}\n                      {this.state.decoded_bits.slice().reverse().map((bit, ii) => {return(\n                        <td>\n                          {bit != this.state.true_bits[this.state.true_bits.length-(ii+1)] ? '1' : '0'}\n                        </td>\n                      )})}\n                      <td>\n                        Bit errors\n                      </td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </CardBody>\n            </Card>\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  <h1>\n                    BPSK Communication with AWGN and simbol redundancy\n                  </h1>\n                </CardTitle>\n              </CardHeader>\n              <CardBody>\n                <p>\n                  The figures above depict a digital communication example.\n                  This one consists on a transmitter, a channel and a receiver.\n                </p>\n                <Row>\n                  <Col md=\"4\">\n                    <h3>The transmitter</h3>\n                    <p align='left'>\n                      The transmitter consiste on a BPSK modulator with redundancy.\n                      This means that maps each bit into the BPSK constellation [-1, 1], in this case -1 for 0 and 1 for 1.\n                      Then it replicates the symbols for as many samples as specified.\n                      The samples per bit can be modified with the slider.\n                      (The transmission power is considered as 1 for simplicity).\n                    </p>\n                    <p>\n                      The transmitted signal is represented with blue in the left graph.\n                    </p>\n                  </Col>\n                  <Col md=\"4\">\n                    <h3>The channel</h3>\n                    <p align='left'>\n                      The channel is modeled as an additive white Gaussian noise channel (AWGN).\n                      This means that for each sample in the signal it adds a noise component distributed as an independent Gaussian variable.\n                      <InlineMath math=\"n[t]\\sim\\mathcal{N}(0, \\sigma^2)\" />\n                      <BlockMath math=\"y_r[t] = y_t[t] + n[t]\"/>\n                    </p>\n                    <p>\n                      The effect of the channel over the transmitted signal is represented with red in the left graph.\n                    </p>\n                  </Col>\n                  <Col md=\"4\">\n                    <h3>The receiver</h3>\n                    <p align='left'>\n                      The receiver uses a uniform matched filter with downsampling to process the signal and then decodes the BPSK modulation.\n                      It starts by filtering the signal using a moving average of length equal to the number of samples per bit.\n                      Then it performs a downsampling by selecting a sample for each samples block of length equal to the number of samples per bit.\n                      This allows the receiver to eliminate the redundancy per bit while clearing the BPSK constellation symbol.\n                      All is left to do is to decode the BPSK constellation.\n                      The receiver does this by mapping all values greater than 0 to 1 and the remaining ones to 0.\n                    </p>\n                    <p>\n                      The samples that the filter is applied to are highlighted with yellow in the left graph.\n                    </p>\n                    <p>\n                      The result of the filter is depicted with green in the right plot, while the downsampling is depicted as red dots.\n                    </p>\n                  </Col>\n                </Row>\n                <h2>The plots</h2>\n                <Row>\n                  <Col md=\"6\">\n                    <h3>Left plot</h3>\n                    <p align=\"left\">\n                      The left plot represents the communication channel.\n                      The transmitted signal is represented in blue.\n                      The received signal is represented in red.\n                      The samples being filtered are represented in yellow.\n                    </p>\n                    <p align=\"left\">\n                      The signal leaves the transmitter clean (blue line).\n                      Then it encounters the channel getting the noise and becoming distorted (red line).\n                      Finally, it reaces the receiver and gets prepared to be filtered (yellow).\n                    </p>\n                  </Col>\n                  <Col md=\"6\">\n                    <h3>Right plot</h3>\n                    <p align=\"left\">\n                      The right plot represents the decoding at the receiver.\n                      The filtered received signal is represented with blue.\n                      The downsampling is represented with red markers.\n                    </p>\n                    <p align=\"left\">\n                      The signal in the receiver gets filtered becoming the green line.\n                      Then it goes through a subsampling, only selecting one out of each number of samples per bit (red markers).\n                    </p>\n                  </Col>\n                </Row>\n                <h2>The table</h2>\n                <p align=\"left\">\n                  The table compares the transmitted bits against the decoded ones.\n                  Note there's a delay between the transmitted bits and the decoded ones, this is due to representation purposes we have considered the time the signal takes to travel from the transmitter to the receiver.\n                  In practice, for coding/decoding purposes we can consider that the receiver receives the signal being transmitted instantly.\n                </p>\n                <p align=\"left\">\n                  The first row containts the true value of the transmitted bits.\n                  The second row contains the bit as decoded by the receiver.\n                  The last row indicates if there's a bit error, this is a missmatch between the first and second row.\n                </p>\n                <h2>Take-aways</h2>\n                <p align=\"left\">\n                  It's interesting to see how by increasing the signal to noise ratio, the bit decoding error decrease, same as for the samples per bit.\n                  Another thing to note is that a shorter number of sampled per bit allows us to communicate a higher amount of bits at the cost of higher error.\n                  This translates as a trade-off between bits transmitted per second and signal to noise ratio.\n                  As the signal to noise increases, the bit error probabilty decreses allowing us to decrease the number of samples per bit thus increasing the bits per second while mantaining the bit error probability stable.\n                </p>\n                <p align=\"left\">\n                  Try to increase the signal to noise ratio and decrease the number of samples per bit to balance into a nice bit error probabilty, you will see how the number of bits per second increases.\n                </p>\n                <p align=\"left\">\n                  Note: due to the time delay between the transmitted signal and the received one it takes a while until the changes to the parameters take effect.\n                </p>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"./assets/scss/black-dashboard-react.scss\";\nimport \"./assets/demo/demo.css\";\nimport \"./assets/css/nucleo-icons.css\";\ndocument.body.classList.add(\"white-content\");\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}